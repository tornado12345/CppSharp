using System;
using System.Collections.Generic;
using System.Linq;
using CppSharp.AST;

namespace CppSharp.Generators
{
    /// <summary>
    /// Kinds of language generators.
    /// </summary>
    public enum GeneratorKind
    {
        CLI = 1,
        CSharp = 2,
        C,
        CPlusPlus,
        ObjectiveC,
        Java,
        Swift
    }

    /// <summary>
    /// Output generated by each backend generator.
    /// </summary>
    public struct GeneratorOutput
    {
        /// <summary>
        /// Translation unit associated with output.
        /// </summary>
        public TranslationUnit TranslationUnit;

        /// <summary>
        /// Code generators with generated output.
        /// </summary>
        public List<CodeGenerator> Outputs;
    }

    /// <summary>
    /// Generators are the base class for each language backend.
    /// </summary>
    public abstract class Generator : IDisposable
    {
        public BindingContext Context { get; }

        protected Generator(BindingContext context)
        {
            Context = context;
            CppSharp.AST.Type.TypePrinterDelegate += TypePrinterDelegate;
        }

        /// <summary>
        /// Called when a translation unit is generated.
        /// </summary>
        public Action<GeneratorOutput> OnUnitGenerated = delegate { };

        /// <summary>
        /// Setup any generator-specific passes here.
        /// </summary>
        public abstract bool SetupPasses();

        /// <summary>
        /// Setup any generator-specific processing here.
        /// </summary>
        public virtual void Process()
        {

        }

        /// <summary>
        /// Generates the outputs.
        /// </summary>
        public virtual List<GeneratorOutput> Generate()
        {
            var outputs = new List<GeneratorOutput>();

            var units = Context.ASTContext.TranslationUnits.GetGenerated().ToList();

            if (Context.Options.IsCSharpGenerator &&
                Context.Options.GenerateSingleCSharpFile)
                GenerateSingleTemplate(outputs);
            else
                GenerateTemplates(outputs, units.Where(u => !u.IsSystemHeader));

            return outputs;
        }

        private void GenerateTemplates(List<GeneratorOutput> outputs, IEnumerable<TranslationUnit> units)
        {
            foreach (var unit in units)
            {
                var templates = Generate(new[] { unit });
                if (templates.Count == 0)
                    return;

                foreach (var template in templates)
                {
                    template.Process();
                }

                var output = new GeneratorOutput
                {
                    TranslationUnit = unit,
                    Outputs = templates
                };

                outputs.Add(output);

                OnUnitGenerated(output);
            }
        }

        private void GenerateSingleTemplate(ICollection<GeneratorOutput> outputs)
        {
            foreach (var module in Context.Options.Modules)
            {
                var output = new GeneratorOutput
                {
                    TranslationUnit = new TranslationUnit
                    {
                        FilePath = $"{module.LibraryName}.cs",
                        Module = module
                    },
                    Outputs = Generate(module.Units.GetGenerated())
                };
                output.Outputs[0].Process();
                outputs.Add(output);

                OnUnitGenerated(output);
            }
        }

        /// <summary>
        /// Generates the outputs for the given translation units.
        /// </summary>
        /// <param name="units">The units to generate outputs for.</param>
        public abstract List<CodeGenerator> Generate(IEnumerable<TranslationUnit> units);

        protected abstract string TypePrinterDelegate(CppSharp.AST.Type type);

        public static string GeneratedIdentifier(string id)
        {
            return "__" + id;
        }

        public void Dispose()
        {
            CppSharp.AST.Type.TypePrinterDelegate -= TypePrinterDelegate;
        }
    }
}